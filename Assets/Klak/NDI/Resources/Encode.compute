// KlakNDI - NDI plugin for Unity
// https://github.com/keijiro/KlakNDI

#pragma kernel EncodeUYVY
#pragma kernel AppendAlpha

Texture2D<half4> Source;
RWBuffer<uint> Destination;

half3 LinearToGammaSpace(half3 linRGB)
{
    linRGB = max(linRGB, half3(0, 0, 0));
    return max(1.055 * pow(linRGB, 0.416666667) - 0.055, 0);
}

// Rec.709 with sRGB transfer function
half3 RGB2YUV(half3 rgb)
{
    const half K_B = 0.0722;
    const half K_R = 0.2126;

    rgb = LinearToGammaSpace(rgb);

    half y = dot(half3(K_R, 1 - K_B - K_R, K_B), rgb);
    half u = ((rgb.b - y) / (1 - K_B) * 112 + 128) / 255;
    half v = ((rgb.r - y) / (1 - K_R) * 112 + 128) / 255;

    y = (y * 219 + 16) / 255;

    return half3(y, u, v);
}

[numthreads(8, 8, 1)]
void EncodeUYVY(uint3 id : SV_DispatchThreadID)
{
    uint2 p1 = id.xy * uint2(2, 1);
    uint2 p2 = p1 + uint2(1, 0);

    half3 yuv1 = RGB2YUV(Source[p1].rgb);
    half3 yuv2 = RGB2YUV(Source[p2].rgb);

    half u = (yuv1.y + yuv2.y) * 0.5;
    half v = (yuv1.z + yuv2.z) * 0.5;

    uint4 uyvy = saturate(half4(u, yuv1.x, v, yuv2.x)) * 255;
    uint packed = uyvy.x + (uyvy.y << 8) + (uyvy.z << 16) + (uyvy.w << 24);

    uint w, h;
    Source.GetDimensions(w, h);
    Destination[(h - 1 - id.y) * (w / 2) + id.x] = packed;
}

[numthreads(8, 8, 1)]
void AppendAlpha(uint3 id : SV_DispatchThreadID)
{
    uint2 p1 = id.xy * uint2(4, 1);

    uint a1 = saturate(Source[p1 + uint2(0, 0)].a) * 255;
    uint a2 = saturate(Source[p1 + uint2(1, 0)].a) * 255;
    uint a3 = saturate(Source[p1 + uint2(2, 0)].a) * 255;
    uint a4 = saturate(Source[p1 + uint2(3, 0)].a) * 255;

    uint packed = a1 + (a2 << 8) + (a3 << 16) + (a4 << 24);

    uint w, h;
    Source.GetDimensions(w, h);
    Destination[w / 2 * h + (h - 1 - id.y) * (w / 4) + id.x] = packed;
}
